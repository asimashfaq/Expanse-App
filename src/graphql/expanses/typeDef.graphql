input ExpansesInput{
    id: Int
    name: String!
    description: String
    total_amount: Float!
    ratioId: Int!
    shares_with: [Int!]!
}
type Balance {
    receivable: Float
    paid: Float
    received: Float
}
type ExpansesShare{
    id: Int
    amount: Float
    user: User!
    expanse: Expanses!
    payment: [Payment!]!
    status: String
}
type Expanses{
    id: Int
    name: String!
    description: String
    total_amount: Float!
    ratio: Ratio!
    user: User!
    expansesShare: [ExpansesShare!]!
    createdAt: String
    updatedAt: String
}
enum ShareStatus {
    Paid
    Pending
    Partial
}
type Query {
  expanses: [Expanses!]!
  expanse(id: Int!): Expanses!
  expansesShares(status: ShareStatus!): [ExpansesShare!]!
  balance: Balance!
}
type Mutation {
    createExpanses(input:ExpansesInput): Expanses!
}